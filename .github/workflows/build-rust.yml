name: Rust workflow

on:
  workflow_call:
    secrets:
      docker_registry_username:
        required: true 
      docker_registry_password:
        required: true
      argocd_password:
        required: false
      test_env_vars:
        required: false
        description: |
          Environment variables for tests in JSON format, e.g. `{"VAR1": "value1", "VAR2": "value2"}`.
          If not provided, no environment variables will be set.
    inputs:
      argocd_host:
        type: string
        required: false
      argocd_app:
        type: string
      aws_region:
        required: true
        type: string
      work_dir:
        type: string
        default: "."
      enable_test:
        default: false
        type: boolean
      enable_build:
        default: false
        type: boolean
      extra_tag:
        required: false
        type: string
      enable_sync:
        default: false
        type: boolean
      enable_restart:
        default: false
        type: boolean
      image_name:
        type: string
        required: false
      docker_context:
        type: string
        required: false
        default: "."

jobs:
  test:
    name: Test
    if: ${{ inputs.enable_test }}
    runs-on: ubuntu-24.04
    steps:
      - name: Set up environment variables
        run: |
          test_env_vars=$(cat <<EOF
          ${{ secrets.test_env_vars }}
          EOF
          )

          if [ -z "${test_env_vars}" ]; then
            echo "No test environment variables provided."
            test_env_vars="{}"
          fi

          {
            echo "test_env_vars<<EOF"
            echo "${test_env_vars}"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Run tests
        env:
          ${{ fromJSON(env.test_env_vars) }}
        run: |
          make test 
  build:
    name: Build
    if: ${{ inputs.enable_build }}
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      # Cache cargo registry and index
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      # Cache cargo binaries
      - name: Cache cargo bin
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-cross
          restore-keys: |
            ${{ runner.os }}-cargo-bin-
      - name: Build binary
        env:
          TARGETPLATFORM: ${{ matrix.platform }}
        run: |
          cd ${{ inputs.work_dir }}
          
          # Create build-rust.sh script inline
          cat > build-rust.sh << 'EOF'
          #!/usr/bin/env sh
          
          set -e
          
          if ! command -v rustup >/dev/null 2>&1; then
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "${HOME}/.cargo/env"
          fi
          
          host_os="$(uname -s)"
          case "$host_os" in
            Darwin) host_os=darwin; find_cmd="find" ;;
            Linux)  host_os=linux;  find_cmd="find"  ;;
          esac
          
          host_arch="$(uname -m)"
          case "$host_arch" in
            x86_64)  host_arch=amd64 ;;
            aarch64) host_arch=arm64 ;;
            armv7l)  host_arch=arm; host_variant=v7 ;;
            armv6l)  host_arch=arm; host_variant=v6 ;;
          esac
          
          host_platform="${host_os}/${host_arch}"
          echo "host_platform: ${host_platform}"
          test -n "${host_variant}" && host_platform="${host_platform}/${host_variant}"
          
          test -n "${TARGETPLATFORM}" || TARGETPLATFORM="${host_platform}"
          
          case "${TARGETPLATFORM}" in
            linux/386)     rust_target=i686-unknown-linux-gnu ;;
            linux/amd64)   rust_target=x86_64-unknown-linux-gnu ;;
            linux/arm64)   rust_target=aarch64-unknown-linux-gnu ;;
            linux/arm/v7)  rust_target=armv7-unknown-linux-gnueabihf ;;
            linux/arm/v6)  rust_target=arm-unknown-linux-gnueabihf ;;
            darwin/amd64)  rust_target=x86_64-apple-darwin ;;
            darwin/arm64)  rust_target=aarch64-apple-darwin ;;
            windows/amd64) rust_target=x86_64-pc-windows-gnu ;;
            windows/arm64) rust_target=aarch64-pc-windows-msvc ;;
            *)             rust_target=unknown ;;
          esac
          
          platform="$(echo "$TARGETPLATFORM" | sed 's|/|-|g')"
          mkdir -p "target/${platform}/release"
          
          platform_file="target/last-platform.txt"
          if [ -f "$platform_file" ]; then
            last_platform="$(cat "$platform_file")"
            if [ "$last_platform" != "$platform" ]; then
              echo "Platform changed from ${last_platform} to ${platform}. Cleaning target..."
              rm -Rf target/release/
            fi
          fi
          echo "$platform" > "$platform_file"
          
          if [ "${host_platform}" != "${TARGETPLATFORM}" ]; then
            cargo install cross --git https://github.com/cross-rs/cross
            cross build --release --target "${rust_target}"
            $find_cmd "target/${rust_target}/release/" -maxdepth 1 -type f -executable -exec cp {} "target/${platform}/release/" \;
            if [ -n "${CI}" ]; then
              cat target/${rust_target}/release/*.d
              rm -Rf "target/${rust_target}"
              docker image rm "ghcr.io/cross-rs/${rust_target}:main" || true
            fi
          else
            cargo build --release
            $find_cmd target/release/ -maxdepth 1 -type f -executable -exec cp {} "target/${platform}/release/" \;
            test -n "${CI}" && cat target/release/*.d
          fi
          EOF
          
          chmod +x build-rust.sh && ./build-rust.sh
      - name: Normalize platform name
        run: echo "PLATFORM_SAFE=${{ matrix.platform }}" | sed 's/\//-/' >> $GITHUB_ENV

      - name: Upload target directory
        uses: actions/upload-artifact@v4
        with:
          path: ${{ inputs.work_dir }}/target/${{ env.PLATFORM_SAFE }}
          name: ${{ env.PLATFORM_SAFE }}
          retention-days: 1

  push:
    name: push
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Download target directory
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts

      - name: Combine target directories
        run: |
          mkdir -p ${{ inputs.work_dir }}/target
          for dir in /tmp/artifacts/*; do
            echo "Merging from $dir"
            subdir_name=$(basename "$dir")
            mv "$dir" "${{ inputs.work_dir }}/target/${subdir_name}"
          done

      # Build and push Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker_registry_username }}
          password: ${{ secrets.docker_registry_password }}

      - name: Build Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: aukilabs/${{ inputs.image_name }}
          tags: |
            type=sha,format=long,prefix=
            type=raw,enable={{is_not_default_branch}},value={{branch}}
            type=raw,enable={{is_default_branch}},value=latest
            type=raw,enable=${{ inputs.extra_tag != '' }},value=${{ inputs.extra_tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          context: ${{ inputs.docker_context }}
          tags: ${{ steps.docker-metadata.outputs.tags }}

  deploy:
    name: Deploy
    needs: push
    if: ${{ inputs.argocd_host }}
    runs-on: ubuntu-24.04
    steps:
      - name: Authenticate ArgoCD
        uses: clowdhaus/argo-cd-action/@v2.3.0
        with:
          command: login
          options: --username admin --password "${{ secrets.argocd_password }}" --grpc-web "${{ inputs.argocd_host }}:443"
      - name: Sync ArgoCD app
        uses: clowdhaus/argo-cd-action/@v2.3.0
        if: ${{ inputs.enable_sync }}
        with:
          command: app sync "${{ inputs.argocd_app }}"
          options: --grpc-web --async
      - name: Restart ArgoCD app
        uses: clowdhaus/argo-cd-action/@v2.3.0
        if: ${{ inputs.enable_restart }}
        with:
          command: app actions run "${{ inputs.argocd_app }}" restart
          options: --kind StatefulSet --grpc-web
